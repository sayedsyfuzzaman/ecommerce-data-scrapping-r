output$frequencyofeachcategory <- renderPlot(freq_of_each_car)
output$pricevscategory <- renderPlot(prc_vs_cat, res = 96)
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
runApp()
meanByCategory = products %>% group_by(Category)  %>%
summarise(meanPrice = mean(Price),
.groups = 'drop')
meanByCategory = products %>% group_by(Category)  %>%
summarise(meanPrice = mean(Price),
.groups = 'drop')
ggplot(meanByCategory)+
geom_col(aes(x = reorder(Category, meanPrice), y = meanPrice)) +
labs(title="Average Price per Category", x = "Category", y = "Average Price")+
theme(axis.title = element_text(size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(size = 20, hjust = 0.5),
plot.subtitle = element_text(size = 15, hjust= 0.5))
meanByCategory = products %>% group_by(Category)  %>%
summarise(meanPrice = mean(Price),
.groups = 'drop')
library(dplyr)
meanByCategory = products %>% group_by(Category)  %>%
summarise(meanPrice = mean(Price),
.groups = 'drop')
avg_p_cat <- ggplot(meanByCategory)+
geom_col(aes(x = reorder(Category, meanPrice), y = meanPrice)) +
labs(title="Average Price per Category", x = "Category", y = "Average Price")+
theme(axis.title = element_text(size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(size = 20, hjust = 0.5),
plot.subtitle = element_text(size = 15, hjust= 0.5))
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
"Data Scrapping Project",
tabPanel("Overview",
sidebarPanel(
h3("Project Name: Web Scrapping"),
p("Final Term Project"),
p("Introduction to Data Science [B]")
),
mainPanel(
h1("Project Overview"),
textOutput("poverview"),
br(),
h1("Collection of data by web scrapping"),
fluidRow(
column(
dataTableOutput(outputId = "dataset"), width = 12)
),
br(),
h1("Cleaned Data after data preprocessing"),
fluidRow(
column(
dataTableOutput(outputId = "cleaned_dataset"), width = 12)
),
) # mainPanel
),
tabPanel("Data Visualization",
sidebarPanel(
h3("Project Name: Web Scrapping"),
p("Final Term Project"),
p("Introduction to Data Science [B]")
),
mainPanel(
plotOutput("frequencyofeachcategory"),
plotOutput("pricevscategory"),
plotOutput("avgpricepercategory"),
)
),
tabPanel("Code", "This panel is intentionally left blank"),
) # navbarPage
) # fluidPage
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$dataset <- renderDataTable(
{df}, options = list(scrollX = TRUE, pageLength = 10))
output$cleaned_dataset <- renderDataTable(
{cln_df}, options = list(scrollX = TRUE, pageLength = 10))
output$poverview <- renderText(paste(readLines("overview.txt"), collapse="\n"))
output$frequencyofeachcategory <- renderPlot(freq_of_each_car)
output$pricevscategory <- renderPlot(prc_vs_cat)
output$avgpricepercategory <- renderPlot(avg_p_cat)
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
# Maximum price and Minimum Price by Category
library(dplyr)
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
maxMinByCategory = products %>% group_by(Category)  %>%
summarise(maxPrice = max(Price),
minPrice = min(Price),
.groups = 'drop')
library(dplyr)
maxMinByCategory = products %>% group_by(Category)  %>%
summarise(maxPrice = max(Price),
minPrice = min(Price),
.groups = 'drop')
tidyr_maxMinByCategory <- tidyr::pivot_longer(maxMinByCategory, cols=c('maxPrice', 'minPrice'), names_to='variable',
values_to="Price")
maxpandminp_by_cat <- ggplot(tidyr_maxMinByCategory, aes(x=Category, y=Price, fill=variable)) +
geom_bar(stat='identity', position='dodge') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(ggplot2)
theme_set(theme_bw())
maxpandminp_by_cat <- ggplot(tidyr_maxMinByCategory, aes(x=Category, y=Price, fill=variable)) +
geom_bar(stat='identity', position='dodge') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
install.packages("plotrix")
pos <- pie3D(table(products$Available), labels = c("Not Available", "Available"), labelrad=1.25)
library(plotrix)
pos <- pie3D(table(products$Available), labels = c("Not Available", "Available"), labelrad=1.25)
pos[1]<- 0.4
dfFreq <-as.data.frame(table(products$Available))
pie3D(table(products$Available), labels = c(paste(format(round((dfFreq[1,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2),"%",sep = ""),paste(format(round((dfFreq[2,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2) ,"%",sep = "")), labelrad = 0.8, labelpos=pos, col = hcl.colors(2, "Spectral"))
legend(x= -1.05,y= 0.7, c("Not Available", "Available"), cex = 0.7, fill = hcl.colors(2, "Spectral"))
library(plotrix)
pos <- pie3D(table(products$Available), labels = c("Not Available", "Available"), labelrad=1.25)
dfFreq <-as.data.frame(table(products$Available))
pie3D(table(products$Available), labels = c(paste(format(round((dfFreq[1,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2),"%",sep = ""),paste(format(round((dfFreq[2,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2) ,"%",sep = "")), labelrad = 0.8, labelpos=pos, col = hcl.colors(2, "Spectral"))
legend(x= -1.05,y= 0.7, c("Not Available", "Available"), cex = 0.7, fill = hcl.colors(2, "Spectral"))
availability <- legend(x= -1.05,y= 0.7, c("Not Available", "Available"), cex = 0.7, fill = hcl.colors(2, "Spectral"))
library(shiny)
library(shinythemes)
library(DT)
df <- read.csv('data/dataset.csv')
cln_df <- read.csv('data/cleaned_dataset.csv')
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
"Data Scrapping Project",
tabPanel("Overview",
sidebarPanel(
h3("Project Name: Web Scrapping"),
p("Final Term Project"),
p("Introduction to Data Science [B]")
),
mainPanel(
h1("Project Overview"),
textOutput("poverview"),
br(),
h1("Collection of data by web scrapping"),
fluidRow(
column(
dataTableOutput(outputId = "dataset"), width = 12)
),
br(),
h1("Cleaned Data after data preprocessing"),
fluidRow(
column(
dataTableOutput(outputId = "cleaned_dataset"), width = 12)
),
) # mainPanel
),
tabPanel("Data Visualization",
sidebarPanel(
h3("Project Name: Web Scrapping"),
p("Final Term Project"),
p("Introduction to Data Science [B]")
),
mainPanel(
plotOutput("frequencyofeachcategory"),
plotOutput("pricevscategory"),
plotOutput("avgpricepercategory"),
plotOutput("maxpandminbycat"),
plotOutput("availability_pie"),
)
),
tabPanel("Code", "This panel is intentionally left blank"),
) # navbarPage
) # fluidPage
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$dataset <- renderDataTable(
{df}, options = list(scrollX = TRUE, pageLength = 10))
output$cleaned_dataset <- renderDataTable(
{cln_df}, options = list(scrollX = TRUE, pageLength = 10))
output$poverview <- renderText(paste(readLines("overview.txt"), collapse="\n"))
output$frequencyofeachcategory <- renderPlot(freq_of_each_car)
output$pricevscategory <- renderPlot(prc_vs_cat)
output$avgpricepercategory <- renderPlot(avg_p_cat)
output$maxpandminbycat <- renderPlot(maxpandminp_by_cat)
output$availability_pie <- renderPlot(availability)
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
availability
runApp()
runApp()
pos <- pie3D(table(products$Available), labels = c("Not Available", "Available"), labelrad=1.25)
pos[1]<- 0.4
dfFreq <-as.data.frame(table(products$Available))
pie3D(table(products$Available), labels = c(paste(format(round((dfFreq[1,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2),"%",sep = ""),paste(format(round((dfFreq[2,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2) ,"%",sep = "")), labelrad = 0.8, labelpos=pos, col = hcl.colors(2, "Spectral"))
legend(x= -1.05,y= 0.7, c("Not Available", "Available"), cex = 0.7, fill = hcl.colors(2, "Spectral"))
source("F:/BSc in CSE/Fall 22-23/Data Science/final_project/visualizations.R")
pos <- pie3D(table(products$Available), labels = c("Not Available", "Available"), labelrad=1.25)
pos[1]<- 0.4
dfFreq <-as.data.frame(table(products$Available))
pie3D(table(products$Available), labels = c(paste(format(round((dfFreq[1,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2),"%",sep = ""),paste(format(round((dfFreq[2,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2) ,"%",sep = "")), labelrad = 0.8, labelpos=pos, col = hcl.colors(2, "Spectral"))
legend(x= -1.05,y= 0.7, c("Not Available", "Available"), cex = 0.7, fill = hcl.colors(2, "Spectral"))
maxpandminp_by_cat <- ggplot(tidyr_maxMinByCategory, aes(x=Category, y=Price, fill=variable)) +
geom_bar(stat='identity', position='dodge') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
maxpandminp_by_cat
availability <- pie3D(table(products$Available), labels = c(paste(format(round((dfFreq[1,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2),"%",sep = ""),paste(format(round((dfFreq[2,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2) ,"%",sep = "")), labelrad = 0.8, labelpos=pos, col = hcl.colors(2, "Spectral"))
availability
availability
availability <- pie3D(table(products$Available), labels = c(paste(format(round((dfFreq[1,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2),"%",sep = ""),paste(format(round((dfFreq[2,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2) ,"%",sep = "")), labelrad = 0.8, labelpos=pos, col = hcl.colors(2, "Spectral"))%>%
legend(x= -1.05,y= 0.7, c("Not Available", "Available"), cex = 0.7, fill = hcl.colors(2, "Spectral"))
availability
availability
availability <- pie3D(table(products$Available), labels = c(paste(format(round((dfFreq[1,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2),"%",sep = ""),paste(format(round((dfFreq[2,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2) ,"%",sep = "")), labelrad = 0.8, labelpos=pos, col = hcl.colors(2, "Spectral"))%>%
legend(x= -1.05,y= 0.7, c("Not Available", "Available"), cex = 0.7, fill = hcl.colors(2, "Spectral"))
availability <- pie3D(table(products$Available), labels = c(paste(format(round((dfFreq[1,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2),"%",sep = ""),paste(format(round((dfFreq[2,]["Freq"]/sum(dfFreq$Freq))*100, 2), nsmall = 2) ,"%",sep = "")), labelrad = 0.8, labelpos=pos, col = hcl.colors(2, "Spectral"))%>%
legend(x= -1.05,y= 0.7, c("Not Available", "Available"), cex = 0.7, fill = hcl.colors(2, "Spectral"))
availability
ui <- fluidPage(theme = shinytheme("cosmo"),
navbarPage(
"Data Scrapping Project",
tabPanel("Overview",
sidebarPanel(
h3("Project Name: Web Scrapping"),
p("Final Term Project"),
p("Introduction to Data Science [B]")
),
mainPanel(
h1("Project Overview"),
textOutput("poverview"),
br(),
h1("Collection of data by web scrapping"),
fluidRow(
column(
dataTableOutput(outputId = "dataset"), width = 12)
),
br(),
h1("Cleaned Data after data preprocessing"),
fluidRow(
column(
dataTableOutput(outputId = "cleaned_dataset"), width = 12)
),
) # mainPanel
),
tabPanel("Data Visualization",
mainPanel(
h1("Data Visualization"),
navlistPanel(
id = "tabset",
"Select Plots",
tabPanel("Frequency of Each Category", plotOutput("frequencyofeachcategory")),
tabPanel("Price vs Category", plotOutput("pricevscategory"),),
tabPanel("Average Price Category", plotOutput("avgpricepercategory")),
tabPanel("Maximum and Minimum Product by Category", plotOutput("maxpandminbycat"),),
tabPanel("Product Price Histogram", imageOutput("productprice")),
tabPanel("Availability Chart", imageOutput("availability"))
)
)
),
tabPanel("Code",
sidebarPanel(
h3("Project Code"),
p("This project was all about scraping a data from an e-commerce site and do a complete analysis with that. The whole analysis has helped us gain knowledge with data and their workings which can use in our further data analysis.")
),
mainPanel(
tabsetPanel(
type = "tab",
tabPanel("scrapping.R", br(), verbatimTextOutput("scrapping")),
tabPanel("data_cleaning.R", br(), verbatimTextOutput("data_cleaning")),
tabPanel("visualizations.R", br(), verbatimTextOutput("visualizations")),
tabPanel("app.R", br(), verbatimTextOutput("app"))
)
)
),
) # navbarPage
) # fluidPage
# Define server function
server <- function(input, output) {
output$dataset <- renderDataTable(
{df}, options = list(scrollX = TRUE, pageLength = 10))
output$cleaned_dataset <- renderDataTable(
{cln_df}, options = list(scrollX = TRUE, pageLength = 10))
output$poverview <- renderText(paste(readLines("overview.txt"), collapse="\n"))
output$frequencyofeachcategory <- renderPlot(freq_of_each_car)
output$pricevscategory <- renderPlot(prc_vs_cat)
output$avgpricepercategory <- renderPlot(avg_p_cat)
output$maxpandminbycat <- renderPlot(maxpandminp_by_cat)
output$productprice <- renderImage({
# Return a list containing the filename
list(src = 'data/product_price.png',
contentType = 'image/png')
})
output$availability <- renderImage({
# Return a list containing the filename
list(src = 'data/availability.jpg',
contentType = 'image/jpg')
})
output$scrapping <- renderPrint({
cat(paste(readLines("scrapping.R"), collapse="\n"), sep = "\n")
})
output$data_cleaning <- renderPrint({
cat(paste(readLines("data_cleaning.R"), collapse="\n"), sep = "\n")
})
output$visualizations <- renderPrint({
cat(paste(readLines("visualizations.R"), collapse="\n"), sep = "\n")
})
output$app <- renderPrint({
cat(paste(readLines("app.R"), collapse="\n"), sep = "\n")
})
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(DT)
df <- read.csv('data/dataset.csv')
cln_df <- read.csv('data/cleaned_dataset.csv')
ui <- fluidPage(theme = shinytheme("cosmo"),
navbarPage(
"Data Scrapping Project",
tabPanel("Overview",
sidebarPanel(
h3("Project Name: Web Scrapping"),
p("Final Term Project"),
p("Introduction to Data Science [B]")
),
mainPanel(
h1("Project Overview"),
textOutput("poverview"),
br(),
h1("Collection of data by web scrapping"),
fluidRow(
column(
dataTableOutput(outputId = "dataset"), width = 12)
),
br(),
h1("Cleaned Data after data preprocessing"),
fluidRow(
column(
dataTableOutput(outputId = "cleaned_dataset"), width = 12)
),
) # mainPanel
),
tabPanel("Data Visualization",
mainPanel(
h1("Data Visualization"),
navlistPanel(
id = "tabset",
"Select Plots",
tabPanel("Frequency of Each Category", plotOutput("frequencyofeachcategory")),
tabPanel("Price vs Category", plotOutput("pricevscategory"),),
tabPanel("Average Price Category", plotOutput("avgpricepercategory")),
tabPanel("Maximum and Minimum Product by Category", plotOutput("maxpandminbycat"),),
tabPanel("Product Price Histogram", imageOutput("productprice")),
tabPanel("Availability Chart", imageOutput("availability"))
)
)
),
tabPanel("Code",
sidebarPanel(
h3("Project Code"),
p("This project was all about scraping a data from an e-commerce site and do a complete analysis with that. The whole analysis has helped us gain knowledge with data and their workings which can use in our further data analysis.")
),
mainPanel(
tabsetPanel(
type = "tab",
tabPanel("scrapping.R", br(), verbatimTextOutput("scrapping")),
tabPanel("data_cleaning.R", br(), verbatimTextOutput("data_cleaning")),
tabPanel("visualizations.R", br(), verbatimTextOutput("visualizations")),
tabPanel("app.R", br(), verbatimTextOutput("app"))
)
)
),
) # navbarPage
) # fluidPage
# Define server function
server <- function(input, output) {
output$dataset <- renderDataTable(
{df}, options = list(scrollX = TRUE, pageLength = 10))
output$cleaned_dataset <- renderDataTable(
{cln_df}, options = list(scrollX = TRUE, pageLength = 10))
output$poverview <- renderText(paste(readLines("overview.txt"), collapse="\n"))
output$frequencyofeachcategory <- renderPlot(freq_of_each_car)
output$pricevscategory <- renderPlot(prc_vs_cat)
output$avgpricepercategory <- renderPlot(avg_p_cat)
output$maxpandminbycat <- renderPlot(maxpandminp_by_cat)
output$productprice <- renderImage({
# Return a list containing the filename
list(src = 'data/product_price.png',
contentType = 'image/png')
})
output$availability <- renderImage({
# Return a list containing the filename
list(src = 'data/availability.jpg',
contentType = 'image/jpg')
})
output$scrapping <- renderPrint({
cat(paste(readLines("scrapping.R"), collapse="\n"), sep = "\n")
})
output$data_cleaning <- renderPrint({
cat(paste(readLines("data_cleaning.R"), collapse="\n"), sep = "\n")
})
output$visualizations <- renderPrint({
cat(paste(readLines("visualizations.R"), collapse="\n"), sep = "\n")
})
output$app <- renderPrint({
cat(paste(readLines("app.R"), collapse="\n"), sep = "\n")
})
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
shiny::runApp()
ui <- fluidPage(theme = shinytheme("cosmo"),
navbarPage(
"E-Commerce Data Scrapping and Analysis",
tabPanel("Overview",
sidebarPanel(
h3("Project Name: E-Commerce Data Scrapping and Analysis"),
p("Final Term Project"),
p("Introduction to Data Science [B]")
),
mainPanel(
h1("Project Overview"),
textOutput("poverview"),
br(),
h1("Collection of data by web scrapping"),
fluidRow(
column(
dataTableOutput(outputId = "dataset"), width = 12)
),
br(),
h1("Cleaned Data after data preprocessing"),
fluidRow(
column(
dataTableOutput(outputId = "cleaned_dataset"), width = 12)
),
) # mainPanel
),
tabPanel("Data Visualization",
mainPanel(
h1("Data Visualization"),
navlistPanel(
id = "tabset",
"Select Plots",
tabPanel("Frequency of Each Category", plotOutput("frequencyofeachcategory")),
tabPanel("Price vs Category", plotOutput("pricevscategory"),),
tabPanel("Average Price Category", plotOutput("avgpricepercategory")),
tabPanel("Maximum and Minimum Product by Category", plotOutput("maxpandminbycat"),),
tabPanel("Product Price Histogram", imageOutput("productprice")),
tabPanel("Availability Chart", imageOutput("availability"))
)
)
),
tabPanel("Code",
sidebarPanel(
h3("Project Code"),
p("This project was all about scraping a data from an e-commerce site and do a complete analysis with that. The whole analysis has helped us gain knowledge with data and their workings which can use in our further data analysis.")
),
mainPanel(
tabsetPanel(
type = "tab",
tabPanel("scrapping.R", br(), verbatimTextOutput("scrapping")),
tabPanel("data_cleaning.R", br(), verbatimTextOutput("data_cleaning")),
tabPanel("visualizations.R", br(), verbatimTextOutput("visualizations")),
tabPanel("app.R", br(), verbatimTextOutput("app"))
)
)
),
) # navbarPage
) # fluidPage
# Define server function
server <- function(input, output) {
output$dataset <- renderDataTable(
{df}, options = list(scrollX = TRUE, pageLength = 10))
output$cleaned_dataset <- renderDataTable(
{cln_df}, options = list(scrollX = TRUE, pageLength = 10))
output$poverview <- renderText(paste(readLines("overview.txt"), collapse="\n"))
output$frequencyofeachcategory <- renderPlot(freq_of_each_car)
output$pricevscategory <- renderPlot(prc_vs_cat)
output$avgpricepercategory <- renderPlot(avg_p_cat)
output$maxpandminbycat <- renderPlot(maxpandminp_by_cat)
output$productprice <- renderImage({
# Return a list containing the filename
list(src = 'data/product_price.png',
contentType = 'image/png')
})
output$availability <- renderImage({
# Return a list containing the filename
list(src = 'data/availability.jpg',
contentType = 'image/jpg')
})
output$scrapping <- renderPrint({
cat(paste(readLines("scrapping.R"), collapse="\n"), sep = "\n")
})
output$data_cleaning <- renderPrint({
cat(paste(readLines("data_cleaning.R"), collapse="\n"), sep = "\n")
})
output$visualizations <- renderPrint({
cat(paste(readLines("visualizations.R"), collapse="\n"), sep = "\n")
})
output$app <- renderPrint({
cat(paste(readLines("app.R"), collapse="\n"), sep = "\n")
})
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
